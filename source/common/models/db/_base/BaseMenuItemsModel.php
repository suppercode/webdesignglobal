<?php

/**
 * This is the model base class for the table "{{menu_items}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "MenuItemsModel".
 *
 * Columns in table "{{menu_items}}" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $name
 * @property string $alias
 * @property string $title_tree
 * @property integer $parent_id
 * @property integer $menu_group
 * @property integer $content_id
 * @property string $params
 * @property integer $menutypes
 * @property string $url
 * @property integer $position
 * @property integer $ordering
 * @property integer $level
 * @property integer $fixed_url
 * @property string $url_open
 * @property string $translate_key
 * @property integer $published
 * @property string $update_time
 * @property string $language
 *
 */
abstract class BaseMenuItemsModel extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_menu_items';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'MenuItemsModel|MenuItemsModels', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, alias', 'required'),
			array('parent_id, menu_group, content_id, menutypes, position, ordering, level, fixed_url, published', 'numerical', 'integerOnly'=>true),
			array('name, alias, title_tree, url, translate_key', 'length', 'max'=>255),
			array('url_open, language', 'length', 'max'=>10),
			array('params, update_time', 'safe'),
			array('title_tree, parent_id, menu_group, content_id, params, menutypes, url, position, ordering, level, fixed_url, url_open, translate_key, published, update_time, language', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, alias, title_tree, parent_id, menu_group, content_id, params, menutypes, url, position, ordering, level, fixed_url, url_open, translate_key, published, update_time, language', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'alias' => Yii::t('app', 'Alias'),
			'title_tree' => Yii::t('app', 'Title Tree'),
			'parent_id' => Yii::t('app', 'Parent'),
			'menu_group' => Yii::t('app', 'Menu Group'),
			'content_id' => Yii::t('app', 'Content'),
			'params' => Yii::t('app', 'Params'),
			'menutypes' => Yii::t('app', 'Menutypes'),
			'url' => Yii::t('app', 'Url'),
			'position' => Yii::t('app', 'Position'),
			'ordering' => Yii::t('app', 'Ordering'),
			'level' => Yii::t('app', 'Level'),
			'fixed_url' => Yii::t('app', 'Fixed Url'),
			'url_open' => Yii::t('app', 'Url Open'),
			'translate_key' => Yii::t('app', 'Translate Key'),
			'published' => Yii::t('app', 'Published'),
			'update_time' => Yii::t('app', 'Update Time'),
			'language' => Yii::t('app', 'Language'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('alias', $this->alias, true);
		$criteria->compare('title_tree', $this->title_tree, true);
		$criteria->compare('parent_id', $this->parent_id);
		$criteria->compare('menu_group', $this->menu_group);
		$criteria->compare('content_id', $this->content_id);
		$criteria->compare('params', $this->params, true);
		$criteria->compare('menutypes', $this->menutypes);
		$criteria->compare('url', $this->url, true);
		$criteria->compare('position', $this->position);
		$criteria->compare('ordering', $this->ordering);
		$criteria->compare('level', $this->level);
		$criteria->compare('fixed_url', $this->fixed_url);
		$criteria->compare('url_open', $this->url_open, true);
		$criteria->compare('translate_key', $this->translate_key, true);
		$criteria->compare('published', $this->published);
		$criteria->compare('update_time', $this->update_time, true);
		$criteria->compare('language', $this->language, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}